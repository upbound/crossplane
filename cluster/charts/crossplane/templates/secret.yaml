{{- $externalSecretStoresEnabled := include "crossplane.externalSecretStoresEnabled" . | eq "true" -}}
{{- if .Values.webhooks.enabled }}
# The reason this is created empty and filled by the init container is that it's
# mounted by the actual container, so if it wasn't created by Helm, then the
# deployment wouldn't be deployed at all with secret to mount not found error.
# In addition, Helm would delete this secret after uninstallation so the new
# installation of Crossplane would use its own certificate.
apiVersion: v1
kind: Secret
metadata:
  name: webhook-tls-secret
  namespace: {{ .Release.Namespace }}
type: Opaque
{{- end }}
{{- if $externalSecretStoresEnabled }}
---
# The reason this is created empty and filled by the init container is we want
# to manage the lifecycle of the secret via Helm.
apiVersion: v1
kind: Secret
metadata:
  name: ess-ca-certs
  namespace: {{ .Release.Namespace }}
type: Opaque
---
# The reason this is created empty and filled by the init container is we want
# to manage the lifecycle of the secret via Helm.
apiVersion: v1
kind: Secret
metadata:
  name: ess-server-certs
  namespace: {{ .Release.Namespace }}
type: Opaque
---
# The reason this is created empty and filled by the init container is that it's
# mounted by the actual container, so if it wasn't created by Helm, then the
# deployment wouldn't be deployed at all with secret to mount not found error.
# In addition, Helm would delete this secret after uninstallation.
apiVersion: v1
kind: Secret
metadata:
  name: ess-client-certs
  namespace: {{ .Release.Namespace }}
type: Opaque
{{- end }}